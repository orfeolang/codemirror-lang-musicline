@top Program { topMusicExpr }

topMusicExpr {
    hws* ( musicExprContent hws* )?
    ( newline | eof )
}

musicExpr {
    RestifierBackslash?
    RhythmFlags?
    RhythmDots?
    MusicExprOpen
       musicExprContent
    MusicExprClose
}

musicExprContent {
    ( MusicExprDuration | measureContentToken )
    ( hws+ measureContentToken )*
}

measureContentToken {
    BlockComment
    | AtomicComment
    | noteCompound
    | restifiedNoteCompound
    | repeaterDashCompound
    | restifiedRepeaterDashCompound
    | restCompound
    | Metronome
    | Marker
}

noteAlternatives {
    Note | NoteBacktick | NoteContainer
}

noteCompound {
    RhythmFlags? RhythmDots? Duration? noteAlternatives
}

restifiedNoteAlternatives {
    RestifiedNote | RestifiedNoteBacktick | RestifiedNoteContainer
}

restifiedNoteCompound {
    RestifierBackslash
    RhythmFlags? RhythmDots? Duration? restifiedNoteAlternatives
}

repeaterDashCompound {
    RhythmFlags? RhythmDots? Duration? RepeaterDash
}

restifiedRepeaterDashCompound {
    RestifierBackslash
    RhythmFlags? RhythmDots? Duration? RestifiedRepeaterDash
}

restCompound {
    RhythmFlags? RhythmDots? Duration? Rest
}

@tokens {
    BlockComment {
        '#' RestifierBackslash? RhythmFlags? RhythmDots?
        (
            '(' ![\)]* ')' |
            '<' ![\>]* '>' |
            '[' ![\)]* ']' |
            '{' ![\}]* '}' |
            '«' ![\»]* '»' |
            '⦗' ![\⦘]* '⦘' |
            '｢' ![\｣]* '｣'
        )
    }

    Metronome {
        $[!♩]
        $[+-]?
        duration
        ( 's' | 'seconds' | 'ms' | 'milliseconds' )?
    }

    MusicExprDuration  { '=' ( duration | 'f' | 'flex' ) }
    AtomicComment      { '#' ![ \t\(\)]* }
    Marker             { '@' $[a-zA-Z0-9'_.-]* $[a-zA-Z0-9']+ }
    MusicExprOpen      { '(' }
    MusicExprClose     { ')' }
    RhythmFlags        { '^'+ }
    RhythmDots         { '.'+ }
    RestifierBackslash { '\\' }
    Rest               { '_'  }

    NoteContainer          { '<' ![>]* '>' }
    RestifiedNoteContainer { '<' ![>]* '>' }
    Note                   { noteManyChars | noteOneChar }
    RestifiedNote          { noteManyChars | noteOneChar }
    NoteBacktick           { '`' ![ \t\(\)]* }
    RestifiedNoteBacktick  { '`' ![ \t\(\)]* }
    RepeaterDash           { '-' }
    RestifiedRepeaterDash  { '-' }

    Duration           { duration }
    duration           { number ( '/' number )? }

    noteOneChar        { $[a-zA-ZáéíóúÁÉÍÓÚâêîôûÂÊÎÔÛàèùÀÈÙëïüËÏÜçÇñÑ] }
    noteManyChars      {
                           $[a-zA-ZáéíóúÁÉÍÓÚâêîôûÂÊÎÔÛàèùÀÈÙëïüËÏÜçÇñÑ'¡¿-]
                           $[a-zA-ZáéíóúÁÉÍÓÚâêîôûÂÊÎÔÛàèùÀÈÙëïüËÏÜçÇñÑ'\-\[/\]♮♭♯,._0-9]*
                           $[a-zA-ZáéíóúÁÉÍÓÚâêîôûÂÊÎÔÛàèùÀÈÙëïüËÏÜçÇñÑ'?\]♮♭♯,._0-9!]
                       }

    number             { integer fraction? }
    integer            { '0' | $[1-9] @digit* }
    fraction           { '.' @digit+ }
    hws                { $[ \t] }
    newline            { '\n' }
    eof                { @eof }

    @precedence { Note, RepeaterDash }
    @precedence { RestifiedNote, RestifiedRepeaterDash }
    @precedence { BlockComment, AtomicComment }
}
